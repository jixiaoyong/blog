<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[之前发布的几个App]]></title>
    <url>%2Fblog%2F2018%2F01%2F%E4%B9%8B%E5%89%8D%E5%8F%91%E5%B8%83%E7%9A%84%E5%87%A0%E4%B8%AAApp%2F</url>
    <content type="text"><![CDATA[在之前学习android的过程中，跟着教程做了几个app，虽然随着使用的api的失效，大多数应用如今已经不能正常使用了，但是作为初入编程的一点点小纪念，还是为他们写一个索引文章，至少能够晚一些消寂于这广阔的数据海洋中。 NiceNewsPosted on 2016-05-30 NieceNews我制作的第二款APP，一个实时新闻软件。 IWeatherPosted on 2016-07-16 IWeather，我的第三个Android应用，一个天气预报APP。 2048Posted on 2016-07-21 2048，我的第四个Android应用，同时也是我的第一款游戏APP。 I看知乎Posted on 2016-07-24 | i看知乎，我的第五个Android应用。 学习的过程需要不断的重复，更需要有条理的总结，我会把平时学习的心得体会，经验，以及无聊时瞎琢磨得出来的稀奇古怪的想法放到这里，主要是为了自己能够在学习的过程中有计划的总结学习到的知识，同时也方便之后查阅。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux下配置Git，使用AndroidStudio同步工程到Github]]></title>
    <url>%2Fblog%2F2016%2F04%2FLinux%E4%B8%8B%E9%85%8D%E7%BD%AEGit%EF%BC%8C%E4%BD%BF%E7%94%A8AndroidStudio%E5%90%8C%E6%AD%A5%E5%B7%A5%E7%A8%8B%E5%88%B0Github%2F</url>
    <content type="text"><![CDATA[这篇文章介绍了如何在 linux 环境下安装和配置 git 与 github ，并且使用 Android Studio 将本地的项目同步到 github 上面。 安装 git1sudo apt-gat install git 配置 git 和 github 创建 Github 账号 生成 ssh key 1ssh-keygen -t rsa -C &quot;your_email@youremail.com 在 github 上面添加 ssh key 进入 Account Settings –&gt; SSH Keys –&gt; Add SSH Key 添加 SSH Keys ：名字起一个容易识别的名字，key 是生成的 /home/username/.ssh/id_rsa.pub. 中的内容，直接粘贴到指定位置就行 测试 ssh key 是否成功 1ssh -T git@github.com 提示如You’ve successfully authenticated, but GitHub does not provide shell access则说明成功连接 github 配置 Github 12git config --global user.name &quot;your name&quot; //配置用户名git config --global user.email &quot;your email&quot; //配置email 用 Android Studio 同步工程到 Github 启动android studio 进入android studio/bin，终端输入./studio.sh 选择 VCS ---&gt; Import into Version Control --&gt; Share Project on Github 第一次进入会要求输入 github 的账号和密码 按照要求输入即可此后还会要求你输入一个本地密码，当下次同步的时候需要输入之后就进入到选择同步的仓库，新建一个仓库，开始同步就可以了 到这里就顺利的在 Android Studio 上面将工程同步到 Github 上面了 以下为原文提到的其他方法，摘录如下，以备后用： 利用Git从本地上传到GitHub第一步： 进入要所要上传文件的目录 输入命令 git init 第二步： 创建一个本地仓库 origin 使用命令 1git remote add origin git@github.com:yourName/yourRepo.git youname是你的GitHub的用户名，yourRepo是你要上传到GitHub的仓库 第三步： 比如你要添加一个文件xxx到本地仓库，使用命令 git add xxx，可以使用 git add . 自动判断添加哪些文件 然后把这个添加提交到本地的仓库，使用命令 git commit -m说明这次的提交 最后把本地仓库origin提交到远程的GitHub仓库，使用命令 git push origin master 从GitHub克隆项目到本地第一步： 到GitHub的某个仓库，然后复制右边的有个HTTPS clone url 第二步： 回到要存放的目录下，使用命令 git clone https://github.com/chenguolin/scrapy.git，这里的url只是一个例子 第三步： 如果本地的版本不是最新的，可以使用命令 git fetch origin，origin是本地仓库 第四步： 把更新的内容合并到本地分支，可以使用命令 git merge origin/master 如果你不想手动去合并，那么你可以使用：git pull &lt;本地仓库&gt; master // 这个命令可以拉去最新版本并自动合并 GitHub的分支管理 创建 1 创建一个本地分支： git branch &lt;新分支名字&gt; 2 将本地分支同步到GitHub上面： git push &lt;本地仓库名&gt; &lt;新分支名&gt; 3 切换到新建立的分支： git checkout &lt;新分支名&gt; 4 为你的分支加入一个新的远程端： git remote add &lt;远程端名字&gt; &lt;地址&gt; 5 查看当前仓库有几个分支: git branch 删除 1 从本地删除一个分支： git branch -d &lt;分支名称&gt; 2 同步到GitHub上面删除这个分支： git push &lt;本地仓库名&gt; :&lt;GitHub端分支&gt; 说明这篇文章是我今天在 linux 下安装 git ，上传工程到 github 上面时的步骤的总结，大部分内容都参考/摘录自下面这篇文章，感谢原作者的分享，原文信息及链接如下： Linux下Git和GitHub使用方法总结[日期：2014-03-07] 来源：Linux社区 作者：chenguolinhttp://www.linuxidc.com/Linux/2014-03/97821.htm]]></content>
  </entry>
  <entry>
    <title><![CDATA[linux下配置JDK和AndroidStudio开发环境]]></title>
    <url>%2Fblog%2F2016%2F04%2Flinux%E4%B8%8B%E9%85%8D%E7%BD%AEJDK%E5%92%8CAndroidStudio%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[下载 JDK 并解压 到官网下载 jdk 下载到的 JDK 文件解压 设置环境变量管理员权限进入 etc/environment 写入以下代码 1JAVA_HOME=&quot;JDK主目录的绝对路径&quot; 配置 alternatives打开终端执行以下命令： 123sudo update-alternatives --install /usr/bin/java java JDK主目录的绝对路径/bin/java 300sudo update-alternatives --install /usr/bin/javac javac JDK主目录的绝对路径/bin/javac 300 到这里 JDK 的环境就配置好了 运行 Android Studio进入 android studio/bin 目录下，打开终端， 输入 ./studio.sh 到这里，就可以正常运行 android studio 了]]></content>
  </entry>
  <entry>
    <title><![CDATA[AppWidget的使用之PendingIntent]]></title>
    <url>%2Fblog%2F2016%2F04%2FAppWidget%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B9%8BPendingIntent%2F</url>
    <content type="text"><![CDATA[这几天学习 AppWidget ，很简单的组件却花费了不少功夫，今天对 PendingIntent 的用法做了一些简单的整理。 PendingIntent PandingIntent 就像是一个设计好的处理预案，当达到某个特定条件时，便会调用该 Intent 所指定动作（打开服务，Activity或者发送广播）。 这里使用该方法在 AppWidget 里面为按钮添加监听事件，当按钮被点击的时候触发相应的动作 AppWidget 和应用程序不再同一个进程当中，而是在 HomeScreen 上面执行,所以不能直接为 AppWidget 中的 Button 添加监听事件，需要用 remoteViews.setPendingIntent(R.id.widget_button,pendingIntent);意思是当按下按钮的时候 pendingIntent 中的 Intent 就会执行 PendingIntent 当某个事件出现之后才会执行 RemoteViews对象 代表了一系列的 View 对象，和主程序不在同一个进程为 AppWidget 控件绑定处理器 流程概述： 添加 appwidget_provider_info.xml 在 res/xml 下新建 appwidget_provider_info.xml 描述 AppWidget 的基本信息如最小高度、宽度等，还有就是该挂件的布局文件 在 res/layout 下面为该挂件设置具体的布局样式 向 AppWidget 的布局文件中添加一个 Button 向 AppWidget 的布局文件中添加一个 TextView 新建 MyAppWidget.java 继承自 AppWidgetProvider 在该类的 onUpdate() 方法中为 Button 设置、添加监听事件 建立一个 Intent 对象 用该 Intent 对象创建一个 PendingIntent 对象 创建一个 RemoteViews 对象 用该 RemoveViews 对象为 按钮绑定事件处理器 更新按钮 注册事件 备注：要是为 AppWidget 中的 Button 设置的事件是打开一个 TargetActivity ，还需要添加一个 TargetActivity 类和对应的布局文件 以下是代码 appwidget_provider_info.xml 这个布局文件是 AppWidget 的信息 描述了 AppWidget 的最小高，最小宽以及它的布局文件 123456&lt;appwidget-provider android:minHeight=&quot;200dp&quot; android:minWidth=&quot;300dp&quot; android:initialLayout=&quot;@layout/app_widget&quot; xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; &gt;&lt;/appwidget-provider&gt; app_widget.xml 这个布局文件是 Widget 在桌面上显示的样式 定义了 AppWidget 中各个组件及其样式 其中 Button 用来响应点击事件，加入 TargetActivity 1234567891011121314151617&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;200dp&quot; android:layout_height=&quot;200dp&quot; android:orientation=&quot;vertical&quot;&gt;&lt;TextView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;hello,world!&quot;/&gt;&lt;Button android:id=&quot;@+id/app_widget_btn&quot; android:layout_width=&quot;200dp&quot; android:layout_height=&quot;150dp&quot; android:background=&quot;#ff00ff&quot; android:text=&quot;this is my app widget button&quot;/&gt;&lt;/LinearLayout&gt; target_activity.xml 123456789101112&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;TextView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:textSize=&quot;50sp&quot; android:background=&quot;#00ff00&quot; android:text=&quot;\n hello,welcome to target activity!&quot;/&gt;&lt;/LinearLayout&gt; MyAppWidget.java 主要是修改了 update() 方法： 定义了一个预先设定的动作—- Intent 对象； 利用该 Intent 读写，创建一个 PendingIntent 对象； 创建一个 RemoteView 对象，并为按钮绑定监听事件 刷新 AppWidget。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051public class MyAppWidget extends AppWidgetProvider &#123; @Override public void onReceive(Context context, Intent intent) &#123; // TODO Auto-generated method stub super.onReceive(context, intent); &#125; @Override public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) &#123; // TODO Auto-generated method stub super.onUpdate(context, appWidgetManager, appWidgetIds); //appWidgetIds 每一次向屏幕添加 AppWidget 的时候都会增加一个唯一的 appWidget 的 Id for(int i = 0; i &lt; appWidgetIds.length;i++)&#123; //创建一个 Intent 对象 Intent intent = new Intent(context,TargetActivity.class); //创建一个 PendingIntent 对象 PendingIntent pendingIntent = PendingIntent.getActivity(context,0,intent,0); // remoteViews 代表 AppWidget 上所有的控件 RemoteViews remoteViews = new RemoteViews(context.getPackageName(), R.layout.app_widget); //为按钮绑定事件处理器 /* * 参1，指定被绑定处理器的控件id * 参2，指定事件发生时会被执行的 PendingIntent */ remoteViews.setOnClickPendingIntent(R.id.app_widget_btn,pendingIntent); //更新 AppWidget ，参1是用于指定被更新 appWidget 的ID appWidgetManager.updateAppWidget(appWidgetIds[i],remoteViews); &#125; &#125; @Override public void onDeleted(Context context, int[] appWidgetIds) &#123; // TODO Auto-generated method stub super.onDeleted(context, appWidgetIds); &#125; @Override public void onEnabled(Context context) &#123; // TODO Auto-generated method stub super.onEnabled(context); &#125; @Override public void onDisabled(Context context) &#123; // TODO Auto-generated method stub super.onDisabled(context); &#125;&#125; TargetActivity.java 1234567public class TargetActivity extends Activity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.target_activity); &#125;&#125; AndroidManifest.xml 在 AndroidManifest.xml 中注册 TargetActivity 和 MyAppWidget 123456789101112131415&lt;application&gt;... &lt;activity android:name=&quot;.TargetActivity&quot;&gt; &lt;/activity&gt; &lt;!-- 注意这里注册了一个 MyAppWidget 接收数据--&gt; &lt;receiver android:name=&quot;.MyAppWidget&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.appwidget.action.APPWIDGET_UPDATE&quot; /&gt; &lt;/intent-filter&gt; &lt;meta-data android:name=&quot;android.appwidget.provider&quot; android:resource=&quot;@xml/appwidget_provider_info&quot;/&gt; &lt;/receiver&gt;&lt;/application&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[AppWidget的使用之PendingIntent]]></title>
    <url>%2Fblog%2F2016%2F04%2F%E5%B0%8F%E7%99%BD%E6%97%A5%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[这几天学习 AppWidget ，很简单的组件却花费了不少功夫，今天对 PendingIntent 的用法做了一些简单的整理。 PendingIntent PandingIntent 就像是一个设计好的处理预案，当达到某个特定条件时，便会调用该 Intent 所指定动作（打开服务，Activity或者发送广播）。 这里使用该方法在 AppWidget 里面为按钮添加监听事件，当按钮被点击的时候触发相应的动作 AppWidget 和应用程序不再同一个进程当中，而是在 HomeScreen 上面执行,所以不能直接为 AppWidget 中的 Button 添加监听事件，需要用 remoteViews.setPendingIntent(R.id.widget_button,pendingIntent);意思是当按下按钮的时候 pendingIntent 中的 Intent 就会执行 PendingIntent 当某个事件出现之后才会执行 RemoteViews对象 代表了一系列的 View 对象，和主程序不在同一个进程为 AppWidget 控件绑定处理器 流程概述： 添加 appwidget_provider_info.xml 在 res/xml 下新建 appwidget_provider_info.xml 描述 AppWidget 的基本信息如最小高度、宽度等，还有就是该挂件的布局文件 在 res/layout 下面为该挂件设置具体的布局样式 向 AppWidget 的布局文件中添加一个 Button 向 AppWidget 的布局文件中添加一个 TextView 新建 MyAppWidget.java 继承自 AppWidgetProvider 在该类的 onUpdate() 方法中为 Button 设置、添加监听事件 建立一个 Intent 对象 用该 Intent 对象创建一个 PendingIntent 对象 创建一个 RemoteViews 对象 用该 RemoveViews 对象为 按钮绑定事件处理器 更新按钮 注册事件 备注：要是为 AppWidget 中的 Button 设置的事件是打开一个 TargetActivity ，还需要添加一个 TargetActivity 类和对应的布局文件 以下是代码 appwidget_provider_info.xml 这个布局文件是 AppWidget 的信息 描述了 AppWidget 的最小高，最小宽以及它的布局文件 123456&lt;appwidget-provider android:minHeight=&quot;200dp&quot; android:minWidth=&quot;300dp&quot; android:initialLayout=&quot;@layout/app_widget&quot; xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; &gt;&lt;/appwidget-provider&gt; app_widget.xml 这个布局文件是 Widget 在桌面上显示的样式 定义了 AppWidget 中各个组件及其样式 其中 Button 用来响应点击事件，加入 TargetActivity 1234567891011121314151617&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;200dp&quot; android:layout_height=&quot;200dp&quot; android:orientation=&quot;vertical&quot;&gt;&lt;TextView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;hello,world!&quot;/&gt;&lt;Button android:id=&quot;@+id/app_widget_btn&quot; android:layout_width=&quot;200dp&quot; android:layout_height=&quot;150dp&quot; android:background=&quot;#ff00ff&quot; android:text=&quot;this is my app widget button&quot;/&gt;&lt;/LinearLayout&gt; target_activity.xml 123456789101112&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;TextView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:textSize=&quot;50sp&quot; android:background=&quot;#00ff00&quot; android:text=&quot;\n hello,welcome to target activity!&quot;/&gt;&lt;/LinearLayout&gt; MyAppWidget.java 主要是修改了 update() 方法： 定义了一个预先设定的动作—- Intent 对象； 利用该 Intent 读写，创建一个 PendingIntent 对象； 创建一个 RemoteView 对象，并为按钮绑定监听事件 刷新 AppWidget。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051public class MyAppWidget extends AppWidgetProvider &#123; @Override public void onReceive(Context context, Intent intent) &#123; // TODO Auto-generated method stub super.onReceive(context, intent); &#125; @Override public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) &#123; // TODO Auto-generated method stub super.onUpdate(context, appWidgetManager, appWidgetIds); //appWidgetIds 每一次向屏幕添加 AppWidget 的时候都会增加一个唯一的 appWidget 的 Id for(int i = 0; i &lt; appWidgetIds.length;i++)&#123; //创建一个 Intent 对象 Intent intent = new Intent(context,TargetActivity.class); //创建一个 PendingIntent 对象 PendingIntent pendingIntent = PendingIntent.getActivity(context,0,intent,0); // remoteViews 代表 AppWidget 上所有的控件 RemoteViews remoteViews = new RemoteViews(context.getPackageName(), R.layout.app_widget); //为按钮绑定事件处理器 /* * 参1，指定被绑定处理器的控件id * 参2，指定事件发生时会被执行的 PendingIntent */ remoteViews.setOnClickPendingIntent(R.id.app_widget_btn,pendingIntent); //更新 AppWidget ，参1是用于指定被更新 appWidget 的ID appWidgetManager.updateAppWidget(appWidgetIds[i],remoteViews); &#125; &#125; @Override public void onDeleted(Context context, int[] appWidgetIds) &#123; // TODO Auto-generated method stub super.onDeleted(context, appWidgetIds); &#125; @Override public void onEnabled(Context context) &#123; // TODO Auto-generated method stub super.onEnabled(context); &#125; @Override public void onDisabled(Context context) &#123; // TODO Auto-generated method stub super.onDisabled(context); &#125;&#125; TargetActivity.java 1234567public class TargetActivity extends Activity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.target_activity); &#125;&#125; AndroidManifest.xml 在 AndroidManifest.xml 中注册 TargetActivity 和 MyAppWidget 123456789101112131415&lt;application&gt;... &lt;activity android:name=&quot;.TargetActivity&quot;&gt; &lt;/activity&gt; &lt;!-- 注意这里注册了一个 MyAppWidget 接收数据--&gt; &lt;receiver android:name=&quot;.MyAppWidget&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.appwidget.action.APPWIDGET_UPDATE&quot; /&gt; &lt;/intent-filter&gt; &lt;meta-data android:name=&quot;android.appwidget.provider&quot; android:resource=&quot;@xml/appwidget_provider_info&quot;/&gt; &lt;/receiver&gt;&lt;/application&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fblog%2F2016%2F03%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
